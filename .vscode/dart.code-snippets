{
    "Create a Api Dto": {
        "prefix": "apiDto",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import '../../../mappers/api_dto.dart';",
            "",
            "part '$TM_FILENAME_BASE.freezed.dart';",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@freezed",
            "class $1ApiDto with _$$1ApiDto implements ApiDto<$1> {",
            "",
            "\tconst factory $1ApiDto({",
            "\t\t// Required fields",
            "\t}) = _$1ApiDto;",
            "\tconst $1ApiDto._();",
            "",
            "\tfactory $1ApiDto.fromJson(Map<String, dynamic> json) => _$$1ApiDtoFromJson(json);",
            "",
            "\t@override",
            "\t$1 toModel() => $1(",
            "\t\t//required field here",
            "\t);",
            "}"
        ],
        "description": "Creates a api dto class implementing ApiDto"
    },

    "Create a Api Dto Class implementing cache": {
        "prefix": "apiDtoImplementingCache",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import '../../../mappers/api_dto.dart';",
            "",
            "part '$TM_FILENAME_BASE.freezed.dart';",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@freezed",
            "class $1ApiDto with _$$1ApiDto implements ApiCacheDto<$1CacheDto> {",
            "",
            "\t\tconst factory $1ApiDto({",
            "\t\t// Required fields",
            "\t}) = _$1ApiDto;",
            "\tconst $1ApiDto._();",
            "",
            "\tfactory $1ApiDto.fromJson(Map<String, dynamic> json) => _$$1ApiDtoFromJson(json);",
            "",
            "\t@override",
            "\t$1CacheDto toCacheDto() => $1CacheDto(",
            "\t\t//required field here",
            "\t);",
            "}"
        ],
        "description": "Creates a api dto class implementing ApiCacheDto"
    },

    "Create a Cache Dto": {
        "prefix": "cacheDto",
        "body": [
            "import 'package:hive_flutter/hive_flutter.dart';",
            "import '../../../../../../core/configs/constants/app_constants.dart';",
            "import '../../../mappers/cache_dto.dart';",
            "",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@HiveType(typeId: AppConstants.$1AdapterId)",
            "class $1CacheDto with HiveObjectMixin implements CacheDto<$1, $1ApiDto> {",
            "",
            "\tstatic String boxKey = AppConstants.$1BoxKey;",
            "",
            "\t//add hive fields here",
            "",
            "\t@override",
            "\t@HiveField()",
            "\tString? syncTime;",
            "",
            "\t@override",
            "\t@HiveField()",
            "\tbool? isSynced;",
            "",
            "\t$1CacheDto({",
            "\t//required field here",
            "\t\tthis.syncTime,",
            "\t\tthis.isSynced,",
            "\t});",
            "",
            "\t@override",
            "\tString get number => id.toString(); // change id to your unique identifier",
            "",
            "\t@override",
            "\t$1 toModel() => $1(",
            "\t\t//required field here",
            "\t);",
            "",
            "\t@override",
            "\t$1ApiDto toApiDto() => $1ApiDto(",
            "\t\t//required field here",
            "\t);",
            "}"
        ],
        "description": "Creates a cache dto implementing CacheDto"
    },

    "Create a Ui Model": {
        "prefix": "uiModel",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import '../../../data/mappers/ui_model.dart';",
            "",
            "part '$TM_FILENAME_BASE.freezed.dart';",
            "",
            "@freezed",
            "class $1 with _$$1 implements UIModel<$1ApiDto> {",
            "",
            "\tconst factory $1({",
            "\t\t// Required fields",
            "\t}) = _$1;",
            "\tconst $1._();",
            "",
            "\t@override",
            "\t$1ApiDto toApiDto() => $1ApiDto(",
            "\t\t//required field here",
            "\t);",
            "}"
        ],
        "description": "Creates a model class implementing UIModel"
    },

    "Create a Model Class extending Hive": {
        "prefix": "uiModelImplementingCache",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "import '../../../data/mappers/ui_model.dart';",
            "",
            "part '$TM_FILENAME_BASE.freezed.dart';",
            "",
            "@freezed",
            "class $1 with _$$1 implements UICacheModel<$1CacheDto> {",
            "",
            "\tconst factory $1({",
            "\t\t// Required fields",
            "\t}) = _$1;",
            "\tconst $1._();",
            "",
            "\t@override",
            "\t$1CacheDto toCacheDto() => $1CacheDto(",
            "\t\t//required field here",
            "\t);",
            "}"
        ],
        "description": "Creates a model class implementing UICacheModel"
    },

    "Create a Freezed Union State": {
        "prefix": "freezedUnionState",
        "body": [
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "",
            "part '$TM_FILENAME_BASE.freezed.dart';",
            "",
            "@freezed",
            "class $1State with _$$1State {",
            "\tconst $1State._();",
            "\tconst factory $1State.loading() = _Loading;",
            "\t //? Add more unions here",
            "}"
        ],
        "description": "Creates a freezed union state class"
    },

    "Register a hive adapater and open box": {
        "prefix": "regHiveAdapaterOpenBox",
        "body": [
            " _hive.registerAdapter<$1CacheDto>($1CacheDtoAdapter());",
            "await _hive.openBox<$1CacheDto>(",
            "\t$1CacheDto.boxKey,",
            "\tencryptionCipher: HiveAesCipher(encryptionKey),",
            ");",
        ],
        "description": "Register a hive adapater and open box"
    },
}